<?php

namespace App\Models;


use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Spatie\Translatable\HasTranslations;

class ProductCategory extends Model
{
    use HasFactory, HasTranslations;

    public $translatable = ['name'];

//    protected $primaryKey = 'category_id_sankhya';

protected $table = 'product_categories';

    protected $fillable = [
        'category_id',
        'step',
        'name',
        'slug',
        'is_active',
        'is_analytical',
        'is_comex',
    ];

    protected $casts = [
        'is_active' => 'boolean',
        'is_analytical' => 'boolean',
        'is_comex' => 'boolean',
    ];

    public function getParentsAttribute()
    {
        $parents = collect();
        $parent = $this->parentCategory;

        while ($parent) {
            $parents->push($parent);
            $parent = $parent->parentCategory;
        }

        return $parents->reverse(); // Retorna as categorias pai na ordem inversa
    }

    public function parentCategory()
    {
        return $this->belongsTo(ProductCategory::class, 'category_id')->where('is_active', true);

    }

    public function childCategories()
    {
        return $this->hasMany(ProductCategory::class, 'category_id')->where('is_active', true);

    }

    public function products()
    {
        return $this->belongsToMany(Product::class);

    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($model) {
            if ($model->slug == null) {
                $model->slug = Str::slug($model->name);
            }
        });
        static::saved(function ($category) {
            // Verifica se a categoria tem um pai
            if ($category->parentCategory) {
                // ObtÃ©m todos os produtos associados a esta categoria
                $products = $category->products()->get();

                // Para cada produto, associe-o ao pai desta categoria
                foreach ($products as $product) {
                    $product->categories()->attach($category->parentCategory->id);
                }
            }
        });
    }

}
